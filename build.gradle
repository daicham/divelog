buildscript {
    ext {
        springBootVersion = '1.3.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot' 

jar {
    baseName = 'divelog'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

sourceSets {
    main.compileClasspath += configurations.providedRuntime
    test.compileClasspath += configurations.providedRuntime
}

dependencies {
    compile('org.springframework.boot:spring-boot-devtools')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.0.0')
    compile('org.flywaydb:flyway-core')
    runtime('org.postgresql:postgresql')
    providedRuntime('org.projectlombok:lombok:1.16.6')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testRuntime('com.h2database:h2')
}


eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task genNewMigrate << {
    def message = "";
    if (project.hasProperty('args')) {
        message = project.args.split('\\s+')[0]
    }
    def now = new Date().format("yyyyMMddHHmmss")
    def newFile = "src/main/resources/db/migration/V${now}_${message}.sql"
    new File(newFile) << ''
    println("New migration file '${newFile}' was generated.")
}

task stage { // For heroku
    dependsOn build
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
